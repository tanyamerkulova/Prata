#include <iostream>

using namespace std;
typedef T int;

int main()
{
    int dim_set_1 = 10;
    int dim_set_2 = 6
    T set_1[dim_set_1][2];
    T set_2[dim_set_2][2];
    T result [3][2];
    for(int i = 0; i < dim_set_1; i++)
    {
        for(int j = i + 1; j < dim_set_1; j++)
        {
            for(int k = j + 1; k < dim_set_1; k++)
            {
                int first_set_count = 0;
                for(int l = 0; l < dim_set_1; l++)
                {
                    if(l != i && l != j && l != k)
                        if(contain(set_1[i], set_1[j], set_1[k], set_1[l]))
                            first_set_count++;
                }
                int second_set_count = 0
                for(int m = 0; m < dim_set_2; m++)
                {
                    if(m != i && m != j && m != k)
                        if(contain(set_1[i], set_1[j], set_1[k], set_1[m]))
                            second_set_count++;
                }
                if(second_count == first_count && second_count != 0)
                    result = 
            }
        }
    }
    
}

bool contain(const T* a, const T* b, const T* c, const T* x)
{
    if(equal(a, b) || equal(a, c) )
    T square = (a[0] - c[0])*(b[1] - c[1]) - (b[0] - c[0])*(a[1] - c[1]);
    T square_1 = (a[0] - x[0])*(b[1] - x[1]) - (b[0] - x[0])*(a[1] - x[1]);
    T square_2 = (x[0] - c[0])*(b[1] - c[1]) - (b[0] - c[0])*(x[1] - c[1]);
    T square_3 = (a[0] - c[0])*(x[1] - c[1]) - (x[0] - c[0])*(a[1] - c[1]);
    
    if(square == 0 || square_1 == 0 || square_2 == 0 || square_3 == 0)
        return false;
    else if(square < square_1 + square_2 + square_3)
        return false;
    else return true;
}